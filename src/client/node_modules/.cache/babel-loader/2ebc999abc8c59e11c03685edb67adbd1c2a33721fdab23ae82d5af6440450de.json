{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { required, validEmailFormat, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { OxdDialog } from '@ohrm/oxd';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nconst subscriberModel = {\n  name: '',\n  email: ''\n};\nexport default {\n  name: 'EditSubscriber',\n  components: {\n    'oxd-dialog': OxdDialog\n  },\n  props: {\n    data: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/admin/email-subscriptions/${props.data.subscriptionId}/subscribers`);\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const subscriberUniqueValidation = createUniqueValidator('EmailSubscriber', 'email', {\n      entityId: props.data.id,\n      matchByField: 'emailNotification',\n      matchByValue: props.data.subscriptionId\n    });\n    return {\n      http,\n      subscriberUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      subscriber: {\n        ...subscriberModel\n      },\n      rules: {\n        name: [required, shouldNotExceedCharLength(100)],\n        email: [required, validEmailFormat, this.subscriberUniqueValidation, shouldNotExceedCharLength(100)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.subscriber.name = data.name;\n      this.subscriber.email = data.email;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.data.id, {\n        ...this.subscriber\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.subscriber = {\n        ...subscriberModel\n      };\n      this.$emit('close', true);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}