{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nconst initialExpenseTypes = {\n  name: '',\n  description: '',\n  status: true\n};\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/claim/expenses/types');\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const expenseTypeNameUniqueValidation = createUniqueValidator('ExpenseType', 'name', {\n      matchByField: 'isDeleted',\n      matchByValue: 'false'\n    });\n    return {\n      http,\n      expenseTypeNameUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      expenseTypes: {\n        ...initialExpenseTypes\n      },\n      rules: {\n        name: [required, this.expenseTypeNameUniqueValidation, shouldNotExceedCharLength(100)],\n        description: [shouldNotExceedCharLength(1000)]\n      }\n    };\n  },\n  methods: {\n    onCancel() {\n      navigate('/claim/viewExpense');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        ...this.expenseTypes,\n        name: this.expenseTypes.name.trim()\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}