{"ast":null,"code":"import { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nexport default {\n  props: {\n    nationalityId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/nationalities');\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const nationalityUniqueValidation = createUniqueValidator('Nationality', 'name', {\n      entityId: props.nationalityId\n    });\n    return {\n      http,\n      nationalityUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      nationality: {\n        id: '',\n        name: ''\n      },\n      rules: {\n        name: [required, shouldNotExceedCharLength(100), this.nationalityUniqueValidation]\n      }\n    };\n  },\n  created() {\n    this.isLoading = true;\n    this.http.get(this.nationalityId).then(response => {\n      const {\n        data\n      } = response.data;\n      this.nationality.id = data.id;\n      this.nationality.name = data.name;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.nationalityId, {\n        name: this.nationality.name\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      navigate('/admin/nationality');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}