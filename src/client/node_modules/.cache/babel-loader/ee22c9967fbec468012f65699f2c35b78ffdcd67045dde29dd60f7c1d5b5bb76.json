{"ast":null,"code":"import { promiseDebounce } from '@ohrm/oxd';\nimport { APIService } from '@/core/util/services/api.service';\nimport usei18n from '@/core/util/composable/usei18n';\nimport { required, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nexport default {\n  props: {\n    langStringId: {\n      type: Number,\n      required: true\n    },\n    required: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const validateLangString = value => {\n      return new Promise(resolve => {\n        if (value) {\n          const http = new APIService(window.appGlobal.baseUrl, `/api/v2/admin/i18n/translation/${props.langStringId}/validate`);\n          http.request({\n            method: 'GET',\n            params: {\n              translation: value\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            return data.valid === true ? resolve(true) : resolve($t('admin.' + data.code));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    };\n    return {\n      validateLangString\n    };\n  },\n  data() {\n    return {\n      rules: {\n        langStringTarget: this.required ? [required, shouldNotExceedCharLength(1000), promiseDebounce(this.validateLangString, 500)] : [shouldNotExceedCharLength(1000), promiseDebounce(this.validateLangString, 500)]\n      }\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}