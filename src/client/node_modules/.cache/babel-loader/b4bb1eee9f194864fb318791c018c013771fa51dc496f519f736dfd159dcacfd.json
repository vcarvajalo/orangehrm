{"ast":null,"code":"import { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nconst initialAuthProvider = {\n  name: '',\n  url: '',\n  clientId: '',\n  clientSecret: ''\n};\nexport default {\n  name: 'AddProvider',\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/auth/openid-providers');\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const providerNameUniqueValidation = createUniqueValidator('OpenIdProvider', 'providerName', {\n      matchByField: 'status',\n      matchByValue: 1\n    });\n    return {\n      http,\n      providerNameUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      authProvider: {\n        ...initialAuthProvider\n      },\n      rules: {\n        name: [required, this.providerNameUniqueValidation, shouldNotExceedCharLength(40)],\n        clientId: [required, shouldNotExceedCharLength(255)],\n        clientSecret: [required, shouldNotExceedCharLength(255)],\n        url: [required, shouldNotExceedCharLength(2000)]\n      }\n    };\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/openIdProvider');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        ...this.authProvider,\n        name: this.authProvider.name.trim()\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}