{"ast":null,"code":"import { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nexport default {\n  name: 'EditProvider',\n  props: {\n    id: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/auth/openid-providers');\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const providerNameUniqueValidation = createUniqueValidator('OpenIdProvider', 'providerName', {\n      entityId: props.id,\n      matchByField: 'status',\n      matchByValue: 1\n    });\n    return {\n      http,\n      providerNameUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      secretPlaceholder: '',\n      authProvider: {\n        name: '',\n        url: '',\n        clientId: '',\n        clientSecret: ''\n      },\n      rules: {\n        name: [required, this.providerNameUniqueValidation, shouldNotExceedCharLength(40)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.authProvider.name = data.providerName;\n      this.authProvider.url = data.providerUrl;\n      this.authProvider.clientId = data.clientId;\n      this.secretPlaceholder = data.clientId ? '******' : '';\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/openIdProvider');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.id, {\n        name: this.authProvider.name,\n        url: this.authProvider.url,\n        clientId: this.authProvider.clientId,\n        clientSecret: this.authProvider.clientSecret === '' ? null : this.authProvider.clientSecret\n      }).then(() => {\n        this.isLoading = false;\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}