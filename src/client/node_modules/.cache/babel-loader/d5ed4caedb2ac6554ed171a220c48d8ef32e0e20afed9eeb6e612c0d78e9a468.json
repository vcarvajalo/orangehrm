{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed } from 'vue';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@/core/util/composable/usePaginate';\nimport useSort from '@/core/util/composable/useSort';\nimport usei18n from '@/core/util/composable/usei18n';\nconst defaultFilters = {\n  descripcion: null,\n  estado: null\n};\nconst defaultSortOrder = {\n  'unidadCalificacion.descripcion': 'ASC',\n  'unidadCalificacion.valor': 'DEFAULT'\n};\nexport default {\n  name: 'UnidadCalificacionSearch',\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  setup() {\n    const {\n      $t\n    } = usei18n();\n    const unidadCalificacionNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          descripcion: item.descripcion,\n          valor: item.valor,\n          estado: item.estado ? $t('general.active') : $t('general.inactive'),\n          isDeletable: item.isDeletable\n        };\n      });\n    };\n    const filters = ref({\n      ...defaultFilters\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        descripcion: filters.value.descripcion,\n        estado: filters.value.estado\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/performance/unidades-calificacion');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: unidadCalificacionNormalizer\n    });\n    onSort(execQuery);\n    const estadoOptions = ref([{\n      label: $t('general.active'),\n      value: true\n    }, {\n      label: $t('general.inactive'),\n      value: false\n    }]);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      items: response,\n      isLoading,\n      execQuery,\n      filters,\n      sortDefinition,\n      estadoOptions\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'descripcion',\n        title: this.$t('unidadCalificacion.descripcion'),\n        sortField: 'unidadCalificacion.descripcion',\n        style: {\n          flex: '30%'\n        }\n      }, {\n        name: 'valor',\n        title: this.$t('unidadCalificacion.valor'),\n        sortField: 'unidadCalificacion.valor',\n        style: {\n          flex: '30%'\n        }\n      }, {\n        name: 'estado',\n        title: this.$t('unidadCalificacion.estado'),\n        style: {\n          flex: '20%'\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: '20%'\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellRenderer: this.cellRenderer\n      }],\n      checkedItems: []\n    };\n  },\n  methods: {\n    cellRenderer(...[,,, row]) {\n      const cellConfig = {};\n      cellConfig.edit = {\n        onClick: this.onClickEdit,\n        props: {\n          name: 'pencil-fill'\n        }\n      };\n      if (row.isDeletable) {\n        cellConfig.delete = {\n          onClick: this.onClickDelete,\n          component: 'oxd-icon-button',\n          props: {\n            name: 'trash'\n          }\n        };\n      }\n      return {\n        props: {\n          header: {\n            cellConfig\n          }\n        }\n      };\n    },\n    onClickAdd() {\n      navigate('/unidad-calificacion/save');\n    },\n    onClickDeleteSelected() {\n      const ids = [];\n      this.checkedItems.forEach(index => {\n        ids.push(this.items?.data[index].id);\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    onClickEdit(item) {\n      navigate('/unidad-calificacion/edit/{id}', {\n        id: item.id\n      });\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}